GOSCM is a Scheme interpreter toolkit for Go; it provides a completely empty
environment, a simple extendable environment out-of-the-box (current WIP) and
will provide an R5RS environment in the near future.

The goal of the project is to provide scheme interpreter features piecemeal, so
that you can mix-and-match the features that you want for extending you
program. R5RS too heavy but you want vectors? Just import the simple package and
either roll your own vectors.

Usage / Examples
===

The "simple" [ackage in this project provides a complete, working and scheme
envitonment with all the basics you would expect. It is designed to provide an
example of how to create your own scheme from scratch using the tools
provided. The R5RS package is designed to show how to extend the simple package
with all of the features required to meet R5RS.

The "Simple" Environment functions
===

Although nothing is set in stone, the simple environment provides the following
functions and special forms:

*
+
-
/
<
<=
=
>
>=
and
apply
begin
car
cdr
cond
cons
define
if
lambda
let
map
not
or
quote
set!

A note on terminology:
===

Despite the fact that "function" and "procedure" are often used interchangably,
"foreign" is used in this project to mean Go functions that have been bound to
scheme and procedure/proc are used to mean scheme procedures. Both are
compatible with the interface "Function", which means we can apply them to a
list of arguments.
