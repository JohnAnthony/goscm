GoSCM is a Scheme interpreter for which being embeddable in Go as a core reason
for existing. It's also more than that; it's a full toolkit for creating a
scheme suitable for extending your program.

Data Types
==

All GoSCM types must be able to Eval() in an environment (whether they use that
environment to return a value or not) and convert to a string with String(). The
basic types and their purposes:

Boolean :- A wrapper for Go's bools
PlainInt :- A wrapper for Go's ints
Pair :- A cons cell, the building blocks of lists and other data structures
Symbol :- A string-based case-insensitive identifier. Used for environment
          lookups, amonst other things.
Environ :- A wrapper around Go's hash maps. Chains with parents to create
           expanding and contracting lookup tables for environmental bindings
Contin :- An environment and list bundled up together and ready to evaluate.
Proc :- A scheme procedure that can combine with a list of evaluated arguments
Macro :- As above, but is evaluated before Procs and with unevaluated arguments
Foreign :- A Go function that can be combines with an environment and list of
           arguments to act like a scheme procedure.
Special :- As above, but is evaluated before Foreigns and with unevaluated
           arguments. Think of it as a foreign function macro.

And the interfaces:

SCMT :- Requires only the ability to Eval() and be a String()
Func :- Can be Applied() to a list of arguments
PreFunc :- Can be Expanded(), re-arranging its arguments ready for Eval()
